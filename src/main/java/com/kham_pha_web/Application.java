package com.kham_pha_web;

import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.scheduling.annotation.EnableAsync;

import jakarta.annotation.PreDestroy;

@Slf4j // ‚úÖ T·ª± t·∫°o logger (Log4j2 qua Lombok)
@SpringBootApplication // ‚úÖ B·∫≠t auto-configuration c·ªßa Spring Boot
@EnableAsync // ‚úÖ Cho ph√©p d√πng c√°c h√†m async trong h·ªá th·ªëng
public class Application {

	/**
	 * ‚úÖ ƒêi·ªÉm v√†o c·ªßa ·ª©ng d·ª•ng (Entry Point)
	 * SpringApplication.run s·∫Ω kh·ªüi ƒë·ªông to√†n b·ªô context c·ªßa Spring Boot
	 */
	public static void main(String[] args) {
		try {
			log.info("Starting application..."); // Ghi log tr∆∞·ªõc khi kh·ªüi ch·∫°y (log framework ƒë√£ s·∫µn s√†ng)

			SpringApplication.run(Application.class, args); // ‚è© Ch·∫°y Spring Boot

			log.info("Application started successfully."); // Log sau khi h·ªá th·ªëng kh·ªüi ƒë·ªông xong

		} catch (Exception ex) {
			// ‚ùå N·∫øu c√≥ l·ªói khi kh·ªüi ƒë·ªông, log l·ªói ƒë·∫ßy ƒë·ªß ƒë·ªÉ d·ªÖ trace
			log.error("‚ùå Error during application startup: {}", ex.getMessage(), ex);
		}
	}

	/**
	 * ‚úÖ Hook shutdown khi ·ª©ng d·ª•ng t·∫Øt (Ctrl+C, kill, ho·∫∑c khi deploy l·∫°i)
	 * R·∫•t h·ªØu √≠ch ƒë·ªÉ log l·∫°i qu√° tr√¨nh shutdown ho·∫∑c gi·∫£i ph√≥ng t√†i nguy√™n (ƒë√≥ng connection, v.v.)
	 */
	@PreDestroy
	public void onShutdown() {
		log.info("üõë Application is shutting down gracefully...");
	}
}
